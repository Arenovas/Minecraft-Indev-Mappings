diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTBase.java minecraft/com/nbt/NBTBase.java
--- minecraft_unpatched/com/nbt/NBTBase.java	2021-09-10 01:29:05.728741800 -0700
+++ minecraft/com/nbt/NBTBase.java	2021-09-11 00:20:07.396963800 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public abstract class NBTBase {
     private String key;
@@ -10,9 +11,9 @@
         this.key = null;
     }
     
-    abstract void writeTagContents(final DataOutput dataOutput);
+    abstract void writeTagContents(final DataOutput dataOutput) throws IOException;
     
-    abstract void readTagContents(final DataInput dataInput);
+    abstract void readTagContents(final DataInput dataInput) throws IOException;
     
     public abstract byte getType();
     
@@ -28,7 +29,7 @@
         return this;
     }
     
-    public static NBTBase readTag(final DataInput dataInput) {
+    public static NBTBase readTag(final DataInput dataInput) throws IOException {
         final byte byte1;
         if ((byte1 = dataInput.readByte()) == 0) {
             return new NBTTagEnd();
@@ -41,7 +42,7 @@
         return tagOfType;
     }
     
-    public static void writeTag(final NBTBase nbtBase, final DataOutput dataOutput) {
+    public static void writeTag(final NBTBase nbtBase, final DataOutput dataOutput) throws IOException {
         dataOutput.writeByte((int)nbtBase.getType());
         if (nbtBase.getType() == 0) {
             return;
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagByte.java minecraft/com/nbt/NBTTagByte.java
--- minecraft_unpatched/com/nbt/NBTTagByte.java	2021-09-10 01:29:05.993970000 -0700
+++ minecraft/com/nbt/NBTTagByte.java	2021-09-11 00:20:00.149272900 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagByte extends NBTBase {
     public byte byteValue;
@@ -14,12 +15,12 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeByte((int)this.byteValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.byteValue = dataInput.readByte();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagByteArray.java minecraft/com/nbt/NBTTagByteArray.java
--- minecraft_unpatched/com/nbt/NBTTagByteArray.java	2021-09-10 01:29:05.776282700 -0700
+++ minecraft/com/nbt/NBTTagByteArray.java	2021-09-11 00:20:16.472616800 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagByteArray extends NBTBase {
     public byte[] byteArray;
@@ -14,13 +15,13 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeInt(this.byteArray.length);
         dataOutput.write(this.byteArray);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         dataInput.readFully(this.byteArray = new byte[dataInput.readInt()]);
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagCompound.java minecraft/com/nbt/NBTTagCompound.java
--- minecraft_unpatched/com/nbt/NBTTagCompound.java	2021-09-10 01:29:05.848344800 -0700
+++ minecraft/com/nbt/NBTTagCompound.java	2021-09-11 00:20:22.687822600 -0700
@@ -3,6 +3,7 @@
 import java.io.DataInput;
 import java.util.Iterator;
 import java.io.DataOutput;
+import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
 
@@ -14,7 +15,7 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         final Iterator iterator = this.tagMap.values().iterator();
         while (iterator.hasNext()) {
             NBTBase.writeTag((NBTBase)iterator.next(), dataOutput);
@@ -23,7 +24,7 @@
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.tagMap.clear();
         NBTBase tag;
         while ((tag = NBTBase.readTag(dataInput)).getType() != 0) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagDouble.java minecraft/com/nbt/NBTTagDouble.java
--- minecraft_unpatched/com/nbt/NBTTagDouble.java	2021-09-10 01:29:06.183132700 -0700
+++ minecraft/com/nbt/NBTTagDouble.java	2021-09-11 00:20:28.311054600 -0700
@@ -2,17 +2,18 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagDouble extends NBTBase {
     private double doubleValue;
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeDouble(this.doubleValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.doubleValue = dataInput.readDouble();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagFloat.java minecraft/com/nbt/NBTTagFloat.java
--- minecraft_unpatched/com/nbt/NBTTagFloat.java	2021-09-10 01:29:05.774280800 -0700
+++ minecraft/com/nbt/NBTTagFloat.java	2021-09-11 00:20:35.073965700 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagFloat extends NBTBase {
     public float floatValue;
@@ -14,12 +15,12 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeFloat(this.floatValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.floatValue = dataInput.readFloat();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagInt.java minecraft/com/nbt/NBTTagInt.java
--- minecraft_unpatched/com/nbt/NBTTagInt.java	2021-09-10 01:29:05.729742700 -0700
+++ minecraft/com/nbt/NBTTagInt.java	2021-09-11 00:20:42.054030600 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagInt extends NBTBase {
     public int intValue;
@@ -14,12 +15,12 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeInt(this.intValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.intValue = dataInput.readInt();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagList.java minecraft/com/nbt/NBTTagList.java
--- minecraft_unpatched/com/nbt/NBTTagList.java	2021-09-10 01:29:06.360284800 -0700
+++ minecraft/com/nbt/NBTTagList.java	2021-09-11 00:20:48.989472300 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 
@@ -14,7 +15,7 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         if (this.tagList.size() > 0) {
             this.tagType = ((NBTBase)this.tagList.get(0)).getType();
         }
@@ -29,7 +30,7 @@
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.tagType = dataInput.readByte();
         final int int1 = dataInput.readInt();
         this.tagList = (List)new ArrayList();
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagLong.java minecraft/com/nbt/NBTTagLong.java
--- minecraft_unpatched/com/nbt/NBTTagLong.java	2021-09-10 01:29:05.850847000 -0700
+++ minecraft/com/nbt/NBTTagLong.java	2021-09-11 00:20:55.989038700 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagLong extends NBTBase {
     public long longValue;
@@ -14,12 +15,12 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeLong(this.longValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.longValue = dataInput.readLong();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagShort.java minecraft/com/nbt/NBTTagShort.java
--- minecraft_unpatched/com/nbt/NBTTagShort.java	2021-09-10 01:29:05.729242800 -0700
+++ minecraft/com/nbt/NBTTagShort.java	2021-09-11 00:21:02.555904200 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagShort extends NBTBase {
     public short shortValue;
@@ -14,12 +15,12 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         dataOutput.writeShort((int)this.shortValue);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         this.shortValue = dataInput.readShort();
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/com/nbt/NBTTagString.java minecraft/com/nbt/NBTTagString.java
--- minecraft_unpatched/com/nbt/NBTTagString.java	2021-09-10 01:29:05.945928400 -0700
+++ minecraft/com/nbt/NBTTagString.java	2021-09-11 00:21:10.006233000 -0700
@@ -2,6 +2,7 @@
 
 import java.io.DataInput;
 import java.io.DataOutput;
+import java.io.IOException;
 
 public final class NBTTagString extends NBTBase {
     public String stringValue;
@@ -14,14 +15,14 @@
     }
     
     @Override
-    final void writeTagContents(final DataOutput dataOutput) {
+    final void writeTagContents(final DataOutput dataOutput) throws IOException {
         final byte[] bytes = this.stringValue.getBytes("UTF-8");
         dataOutput.writeShort(bytes.length);
         dataOutput.write(bytes);
     }
     
     @Override
-    final void readTagContents(final DataInput dataInput) {
+    final void readTagContents(final DataInput dataInput) throws IOException {
         final byte[] array = new byte[dataInput.readShort()];
         dataInput.readFully(array);
         this.stringValue = new String(array, "UTF-8");
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/Minecraft.java minecraft/net/minecraft/client/Minecraft.java
--- minecraft_unpatched/net/minecraft/client/Minecraft.java	2021-09-10 01:29:06.548947700 -0700
+++ minecraft/net/minecraft/client/Minecraft.java	2021-09-14 00:03:57.145991200 -0700
@@ -103,7 +103,7 @@
     private String server;
     private TextureWaterFX textureWaterFX;
     private TextureLavaFX textureLavaFX;
-    volatile boolean running;
+    public volatile boolean running;
     public String debug;
     public boolean inventoryScreen;
     private int prevFrameTime;
@@ -760,7 +760,9 @@
     public final void generateLevel(int width, final int worldShape, int depth, int height) {
         this.setLevel(null);
         System.gc();
-        final String authorName = (this.session != null) ? this.session.username : "anonymous";
+        //Commented code is original and commented out for anti-piracy patch
+        //final String authorName = (this.session != null) ? this.session.username : "anonymous";
+        final String authorName = (this.session == null) ? this.session.username : "anonymous";
         final LevelGenerator levelGenerator;
         (levelGenerator = new LevelGenerator(this.loadingScreen)).islandGen = (depth == 1);
         levelGenerator.floatingGen = (depth == 2);
@@ -784,10 +786,12 @@
             this.theWorld.worldMethod();
         }
         try {
-            final BufferedReader bufferedReader;
-            Integer.parseInt((bufferedReader = new BufferedReader((Reader)new InputStreamReader(new URL(new StringBuilder().append(this.mcApplet.getDocumentBase()).append("?n=").append(this.session.username).append("&i=").append(this.session.sessionId).toString()).openStream()))).readLine());
-            bufferedReader.close();
-            if (this.mcApplet.getDocumentBase().toString().startsWith("http://www.minecraft.net/") || this.mcApplet.getDocumentBase().toString().startsWith("http://minecraft.net/")) {
+        	//Commented code is original and commented out for anti-piracy patch
+            //final BufferedReader bufferedReader;
+            //Integer.parseInt((bufferedReader = new BufferedReader((Reader)new InputStreamReader(new URL(new StringBuilder().append(this.mcApplet.getDocumentBase()).append("?n=").append(this.session.username).append("&i=").append(this.session.sessionId).toString()).openStream()))).readLine());
+            //bufferedReader.close();
+            //if (this.mcApplet.getDocumentBase().toString().startsWith("http://www.minecraft.net/") || this.mcApplet.getDocumentBase().toString().startsWith("http://minecraft.net/")) {
+        	if (!this.mcApplet.getDocumentBase().toString().startsWith("http://www.minecraft.net/") || !this.mcApplet.getDocumentBase().toString().startsWith("http://minecraft.net/")) {
                 this.theWorld = world;
             }
         }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/MinecraftApplet.java minecraft/net/minecraft/client/MinecraftApplet.java
--- minecraft_unpatched/net/minecraft/client/MinecraftApplet.java	2021-09-10 01:29:05.756265400 -0700
+++ minecraft/net/minecraft/client/MinecraftApplet.java	2021-09-14 00:03:37.927172100 -0700
@@ -28,7 +28,9 @@
             final Minecraft mc = this.mc;
             mc.minecraftUri = sb.append(mc.minecraftUri).append(":").append(this.getDocumentBase().getPort()).toString();
         }
-        if (this.getParameter("username") != null && this.getParameter("sessionid") != null) {
+        //Commented code is original and commented out for anti-piracy patch
+        //if (this.getParameter("username") != null && this.getParameter("sessionid") != null) {
+        if (this.getParameter("username") == null && this.getParameter("sessionid") == null) {
             this.mc.session = new SessionData(this.getParameter("username"), this.getParameter("sessionid"));
             if (this.getParameter("mppass") != null) {
                 this.getParameter("mppass");
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/OSValidator.java minecraft/net/minecraft/client/OSValidator.java
--- minecraft_unpatched/net/minecraft/client/OSValidator.java	2021-09-10 01:29:06.160613000 -0700
+++ minecraft/net/minecraft/client/OSValidator.java	2021-09-11 00:23:42.073510000 -0700
@@ -1,7 +1,9 @@
 package net.minecraft.client;
 
 final class OSValidator {
-    static {
+    static int[] osValues;
+
+	static {
         osValues = new int[OS.values().length];
         try {
             OSValidator.osValues[OS.linux.ordinal()] = 1;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/ThreadDownloadResources.java minecraft/net/minecraft/client/ThreadDownloadResources.java
--- minecraft_unpatched/net/minecraft/client/ThreadDownloadResources.java	2021-09-10 01:29:06.466376300 -0700
+++ minecraft/net/minecraft/client/ThreadDownloadResources.java	2021-09-12 01:27:37.122745800 -0700
@@ -32,7 +32,8 @@
     public final void run() {
         try {
             final ArrayList list = new ArrayList();
-            final URL url = new URL("http://www.minecraft.net/resources/");
+            //final URL url = new URL("http://www.minecraft.net/resources/");
+            final URL url = new URL("https://betacraft.pl/resources/");
             final BufferedReader bufferedReader = new BufferedReader((Reader)new InputStreamReader(url.openStream()));
             String line;
             while ((line = bufferedReader.readLine()) != null) {
@@ -89,7 +90,7 @@
         }
     }
     
-    private void downloadResource(final URL url, final File file) {
+    private void downloadResource(final URL url, final File file) throws IOException {
         final byte[] array = new byte[4096];
         final DataInputStream dataInputStream = new DataInputStream(url.openStream());
         final DataOutputStream dataOutputStream = new DataOutputStream((OutputStream)new FileOutputStream(file));
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/ThreadSleepForever.java minecraft/net/minecraft/client/ThreadSleepForever.java
--- minecraft_unpatched/net/minecraft/client/ThreadSleepForever.java	2021-09-10 01:29:06.039008600 -0700
+++ minecraft/net/minecraft/client/ThreadSleepForever.java	2021-09-11 00:23:00.744424000 -0700
@@ -17,7 +17,6 @@
             catch (InterruptedException ex) {
                 continue;
             }
-            break;
         }
     }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/FontRenderer.java minecraft/net/minecraft/client/gui/FontRenderer.java
--- minecraft_unpatched/net/minecraft/client/gui/FontRenderer.java	2021-09-10 01:29:06.395315300 -0700
+++ minecraft/net/minecraft/client/gui/FontRenderer.java	2021-09-14 16:14:53.277145800 -0700
@@ -37,7 +37,8 @@
             int n2 = 0;
             for (int n3 = 0; n2 < 8 && n3 == 0; ++n2) {
                 final int n4 = (i << 3) + n2;
-                for (int n3 = 1, n5 = 0; n5 < 8 && n3 != 0; ++n5) {
+                n3 = 1;
+                for (int n5 = 0; n5 < 8 && n3 != 0; ++n5) {
                     final int n6 = ((n << 3) + n5) * width;
                     final int n7;
                     if ((n7 = (array[n4 + n6] & 0xFF)) > 128) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/GuiContainer.java minecraft/net/minecraft/client/gui/GuiContainer.java
--- minecraft_unpatched/net/minecraft/client/gui/GuiContainer.java	2021-09-10 01:29:05.927913000 -0700
+++ minecraft/net/minecraft/client/gui/GuiContainer.java	2021-09-13 22:35:50.334587000 -0700
@@ -89,123 +89,103 @@
     
     @Override
     protected final void drawSlotInventory(final int integer1, final int integer2, final int integer3) {
+        Slot slot;
+        int i4;
+        int i5 = 1;
         if (integer3 == 0 || integer3 == 1) {
-            int n = integer2;
-            int i = 0;
+            int i6 = 0;
             while (true) {
-                while (i < this.inventorySlots.size()) {
-                    final Slot slot;
-                    if ((slot = (Slot)this.inventorySlots.get(i)).isAtCursorPos(integer1, n)) {
-                        final Slot slot3;
-                        final Slot slot2 = slot3 = slot;
-                        final Slot slot4 = slot3;
-                        if (slot2 != null) {
-                            final Slot slot5 = slot4;
-                            final ItemStack stackInSlot;
-                            if ((stackInSlot = slot5.inventory.getStackInSlot(slot5.slotIndex)) != null || this.itemStack != null) {
-                                if (stackInSlot != null && this.itemStack == null) {
-                                    n = ((integer3 == 0) ? stackInSlot.stackSize : ((stackInSlot.stackSize + 1) / 2));
-                                    this.itemStack = slot4.inventory.decrStackSize(slot4.slotIndex, n);
-                                    if (stackInSlot.stackSize == 0) {
-                                        slot4.putStack(null);
-                                    }
-                                    slot4.onPickupFromSlot();
-                                    return;
+                if (i6 >= this.inventorySlots.size()) {
+                    slot = null;
+                    break;
+                }
+                Slot slot2 = (Slot) this.inventorySlots.get(i6);
+                if (slot2.isAtCursorPos(integer1, integer2)) {
+                    slot = slot2;
+                    break;
+                }
+                i6++;
+            }
+            if (slot != null) {
+                ItemStack stackInSlot = slot.inventory.getStackInSlot(slot.slotIndex);
+                if (stackInSlot != null || this.itemStack != null) {
+                    if (stackInSlot != null && this.itemStack == null) {
+                        this.itemStack = slot.inventory.decrStackSize(slot.slotIndex, integer3 == 0 ? stackInSlot.stackSize : (stackInSlot.stackSize + 1) / 2);
+                        if (stackInSlot.stackSize == 0) {
+                            slot.putStack(null);
+                        }
+                        slot.onPickupFromSlot();
+                    } else if (stackInSlot == null && this.itemStack != null && slot.isItemValid(this.itemStack)) {
+                        int i7 = integer3 == 0 ? this.itemStack.stackSize : 1;
+                        if (i7 > slot.inventory.getInventoryStackLimit()) {
+                            i7 = slot.inventory.getInventoryStackLimit();
+                        }
+                        slot.putStack(this.itemStack.splitStack(i7));
+                        if (this.itemStack.stackSize == 0) {
+                            this.itemStack = null;
+                        }
+                    } else if (stackInSlot != null && this.itemStack != null) {
+                        if (slot.isItemValid(this.itemStack)) {
+                            if (stackInSlot.itemID != this.itemStack.itemID) {
+                                if (this.itemStack.stackSize <= slot.inventory.getInventoryStackLimit()) {
+                                    slot.putStack(this.itemStack);
+                                    this.itemStack = stackInSlot;
                                 }
-                                if (stackInSlot == null && this.itemStack != null && slot4.isItemValid(this.itemStack)) {
-                                    if ((n = ((integer3 == 0) ? this.itemStack.stackSize : 1)) > slot4.inventory.getInventoryStackLimit()) {
-                                        n = slot4.inventory.getInventoryStackLimit();
+                            } else if (stackInSlot.itemID != this.itemStack.itemID) {
+                            } else {
+                                if (integer3 == 0) {
+                                    int i8 = this.itemStack.stackSize;
+                                    if (i8 > slot.inventory.getInventoryStackLimit() - stackInSlot.stackSize) {
+                                        i8 = slot.inventory.getInventoryStackLimit() - stackInSlot.stackSize;
+                                    }
+                                    if (i8 > this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize) {
+                                        i8 = this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize;
                                     }
-                                    slot4.putStack(this.itemStack.splitStack(n));
+                                    this.itemStack.splitStack(i8);
                                     if (this.itemStack.stackSize == 0) {
                                         this.itemStack = null;
                                     }
-                                    return;
-                                }
-                                if (stackInSlot != null && this.itemStack != null) {
-                                    if (slot4.isItemValid(this.itemStack)) {
-                                        if (stackInSlot.itemID != this.itemStack.itemID) {
-                                            if (this.itemStack.stackSize <= slot4.inventory.getInventoryStackLimit()) {
-                                                final ItemStack itemStack = stackInSlot;
-                                                slot4.putStack(this.itemStack);
-                                                this.itemStack = itemStack;
-                                            }
-                                        }
-                                        else if (stackInSlot.itemID == this.itemStack.itemID) {
-                                            if (integer3 == 0) {
-                                                if ((n = this.itemStack.stackSize) > slot4.inventory.getInventoryStackLimit() - stackInSlot.stackSize) {
-                                                    n = slot4.inventory.getInventoryStackLimit() - stackInSlot.stackSize;
-                                                }
-                                                if (n > this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize) {
-                                                    n = this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize;
-                                                }
-                                                this.itemStack.splitStack(n);
-                                                if (this.itemStack.stackSize == 0) {
-                                                    this.itemStack = null;
-                                                }
-                                                final ItemStack itemStack2 = stackInSlot;
-                                                itemStack2.stackSize += n;
-                                                return;
-                                            }
-                                            if (integer3 == 1) {
-                                                n = 1;
-                                                if (1 > slot4.inventory.getInventoryStackLimit() - stackInSlot.stackSize) {
-                                                    n = slot4.inventory.getInventoryStackLimit() - stackInSlot.stackSize;
-                                                }
-                                                if (n > this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize) {
-                                                    n = this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize;
-                                                }
-                                                this.itemStack.splitStack(n);
-                                                if (this.itemStack.stackSize == 0) {
-                                                    this.itemStack = null;
-                                                }
-                                                final ItemStack itemStack3 = stackInSlot;
-                                                itemStack3.stackSize += n;
-                                            }
-                                        }
-                                    }
-                                    else if (stackInSlot.itemID == this.itemStack.itemID && this.itemStack.getItem().getItemStackLimit() > 1 && (n = stackInSlot.stackSize) > 0 && n + this.itemStack.stackSize <= this.itemStack.getItem().getItemStackLimit()) {
-                                        final ItemStack itemStack4 = this.itemStack;
-                                        itemStack4.stackSize += n;
-                                        stackInSlot.splitStack(n);
-                                        if (stackInSlot.stackSize == 0) {
-                                            slot4.putStack(null);
-                                        }
-                                        slot4.onPickupFromSlot();
+                                    stackInSlot.stackSize = i8 + stackInSlot.stackSize;
+                                } else if (integer3 == 1) {
+                                    if (1 > slot.inventory.getInventoryStackLimit() - stackInSlot.stackSize) {
+                                        i5 = slot.inventory.getInventoryStackLimit() - stackInSlot.stackSize;
+                                    }
+                                    if (i5 > this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize) {
+                                        i5 = this.itemStack.getItem().getItemStackLimit() - stackInSlot.stackSize;
+                                    }
+                                    this.itemStack.splitStack(i5);
+                                    if (this.itemStack.stackSize == 0) {
+                                        this.itemStack = null;
                                     }
+                                    stackInSlot.stackSize += i5;
                                 }
                             }
-                            return;
-                        }
-                        if (this.itemStack == null) {
-                            return;
-                        }
-                        final int n2 = (this.width - this.xSize) / 2;
-                        n = (this.height - this.ySize) / 2;
-                        if (integer1 >= n2 && integer2 >= n && integer1 < n2 + this.xSize && integer2 < n + this.xSize) {
-                            return;
-                        }
-                        final EntityPlayerSP thePlayer = this.mc.thePlayer;
-                        if (integer3 == 0) {
-                            thePlayer.dropPlayerItem(this.itemStack);
-                            this.itemStack = null;
-                        }
-                        if (integer3 != 1) {
-                            return;
+                        } else if (stackInSlot.itemID == this.itemStack.itemID && this.itemStack.getItem().getItemStackLimit() > 1 && (i4 = stackInSlot.stackSize) > 0 && this.itemStack.stackSize + i4 <= this.itemStack.getItem().getItemStackLimit()) {
+                            this.itemStack.stackSize += i4;
+                            stackInSlot.splitStack(i4);
+                            if (stackInSlot.stackSize == 0) {
+                                slot.putStack(null);
+                            }
+                            slot.onPickupFromSlot();
                         }
+                    }
+                }
+            } else if (this.itemStack != null) {
+                int i9 = (this.width - this.xSize) / 2;
+                int i10 = (this.height - this.ySize) / 2;
+                if (integer1 < i9 || integer2 < i10 || integer1 >= i9 + this.xSize || integer2 >= this.xSize + i10) {
+                    EntityPlayerSP thePlayer = this.mc.thePlayer;
+                    if (integer3 == 0) {
+                        thePlayer.dropPlayerItem(this.itemStack);
+                        this.itemStack = null;
+                    }
+                    if (integer3 == 1) {
                         thePlayer.dropPlayerItem(this.itemStack.splitStack(1));
                         if (this.itemStack.stackSize == 0) {
                             this.itemStack = null;
                         }
-                        return;
-                    }
-                    else {
-                        ++i;
                     }
                 }
-                Slot slot3;
-                final Slot slot2 = slot3 = null;
-                continue;
             }
         }
     }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/GuiLevelDialog.java minecraft/net/minecraft/client/gui/GuiLevelDialog.java
--- minecraft_unpatched/net/minecraft/client/gui/GuiLevelDialog.java	2021-09-10 01:29:06.139094700 -0700
+++ minecraft/net/minecraft/client/gui/GuiLevelDialog.java	2021-09-11 00:32:21.833579700 -0700
@@ -34,7 +34,7 @@
             }
         }
         finally {
-            GuiLoadLevelScreen.unknown(this.screen, false);
+            this.screen.frozen = false;
         }
     }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/GuiLevelLoading.java minecraft/net/minecraft/client/gui/GuiLevelLoading.java
--- minecraft_unpatched/net/minecraft/client/gui/GuiLevelLoading.java	2021-09-10 01:29:06.479888100 -0700
+++ minecraft/net/minecraft/client/gui/GuiLevelLoading.java	2021-09-11 00:29:06.834901200 -0700
@@ -113,7 +113,7 @@
     public GuiLevelLoading() {
     }
     
-    public static NBTTagCompound writeLevelTags(InputStream var_0_0F) {
+    public static NBTTagCompound writeLevelTags(InputStream var_0_0F) throws IOException {
         var_0_0F = (InputStream)new DataInputStream((InputStream)new GZIPInputStream(var_0_0F));
         try {
             final NBTBase tag;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/GuiLoadLevelScreen.java minecraft/net/minecraft/client/gui/GuiLoadLevelScreen.java
--- minecraft_unpatched/net/minecraft/client/gui/GuiLoadLevelScreen.java	2021-09-10 01:29:05.946929300 -0700
+++ minecraft/net/minecraft/client/gui/GuiLoadLevelScreen.java	2021-09-14 00:05:09.084942900 -0700
@@ -17,16 +17,19 @@
     private GuiScreen parent;
     private boolean finished;
     private boolean loaded;
-    private String[] levels;
+    //Commented code is original and commented out for anti-piracy patch
+    //private String[] levels;
+    private String[] levels = {"Load From Button","Load From Button","Load From Button","Load From Button","Load From Button"};
     private String status;
     protected String title;
-    private boolean frozen;
-    private File selectedFile;
+    boolean frozen;
+    File selectedFile;
     
     public GuiLoadLevelScreen(final GuiScreen i) {
         this.finished = false;
         this.loaded = false;
-        this.levels = null;
+        //Commented code is original and commented out for anti-piracy patch
+        //this.levels = null;
         this.status = "";
         this.title = "Load level";
         this.frozen = false;
@@ -48,7 +51,8 @@
     public void run() {
         try {
             this.status = "Getting level list..";
-            this.levels = new BufferedReader((Reader)new InputStreamReader(new URL("http://" + this.mc.minecraftUri + "/listmaps.jsp?user=" + this.mc.session.username).openConnection().getInputStream())).readLine().split(";");
+            //Commented code is original and commented out for anti-piracy patch
+            //this.levels = new BufferedReader((Reader)new InputStreamReader(new URL("http://" + this.mc.minecraftUri + "/listmaps.jsp?user=" + this.mc.session.username).openConnection().getInputStream())).readLine().split(";");
             if (this.levels.length >= 5) {
                 this.setLevels(this.levels);
                 this.loaded = true;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/gui/SlotArmor.java minecraft/net/minecraft/client/gui/SlotArmor.java
--- minecraft_unpatched/net/minecraft/client/gui/SlotArmor.java	2021-09-10 01:29:05.732745400 -0700
+++ minecraft/net/minecraft/client/gui/SlotArmor.java	2021-09-11 00:28:46.675049100 -0700
@@ -8,8 +8,8 @@
     private /* synthetic */ int armorType;
     
     SlotArmor(final GuiInventory f, final GuiContainer j, final IInventory b, final int integer4, final int integer5, final int integer6, final int armorType) {
-        this.armorType = armorType;
         super(j, b, integer4, 8, integer6);
+    	this.armorType = armorType;
     }
     
     @Override
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/player/EntityPlayerSP.java minecraft/net/minecraft/client/player/EntityPlayerSP.java
--- minecraft_unpatched/net/minecraft/client/player/EntityPlayerSP.java	2021-09-10 01:29:06.336264600 -0700
+++ minecraft/net/minecraft/client/player/EntityPlayerSP.java	2021-09-14 00:05:53.535093700 -0700
@@ -28,7 +28,8 @@
         super(world);
         this.mc = minecraft;
         if (sessionData != null) {
-            this.skinUrl = "http://www.minecraft.net/skin/" + sessionData.username + ".png";
+        	//this.skinUrl = "http://www.minecraft.net/skin/" + sessionData.username + ".png";
+        	this.skinUrl = "http://mcresources.modification-station.net/skinapi.php?user=" + sessionData.username + ".png";
         }
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/player/PlayerControllerCreative.java minecraft/net/minecraft/client/player/PlayerControllerCreative.java
--- minecraft_unpatched/net/minecraft/client/player/PlayerControllerCreative.java	2021-09-10 01:29:06.287222200 -0700
+++ minecraft/net/minecraft/client/player/PlayerControllerCreative.java	2021-09-11 00:39:09.746953500 -0700
@@ -2,13 +2,19 @@
 
 import net.minecraft.game.level.World;
 import net.minecraft.game.item.ItemStack;
+import net.minecraft.client.Minecraft;
 import net.minecraft.client.SessionData;
 import net.minecraft.game.block.Block;
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.game.level.MobSpawner;
 
 public final class PlayerControllerCreative extends PlayerController {
-    private MobSpawner mobSpawner;
+    public PlayerControllerCreative(Minecraft minecraft)
+	{
+		super(minecraft);
+	}
+
+	private MobSpawner mobSpawner;
     
     @Override
     public final void blankPlayerFunction(final EntityPlayer entityPlayer) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/ChunkDistanceComparator.java minecraft/net/minecraft/client/renderer/ChunkDistanceComparator.java
--- minecraft_unpatched/net/minecraft/client/renderer/ChunkDistanceComparator.java	2021-09-10 01:29:06.156609900 -0700
+++ minecraft/net/minecraft/client/renderer/ChunkDistanceComparator.java	2021-09-13 23:01:18.304460000 -0700
@@ -10,4 +10,8 @@
     public ChunkDistanceComparator(final EntityPlayer entityPlayer) {
         this.entityplayer = entityPlayer;
     }
+    
+    public final int compare(Object obj, Object obj2) {
+        return ((WorldRenderer) obj).distanceToEntitySquared(this.entityplayer) < ((WorldRenderer) obj2).distanceToEntitySquared(this.entityplayer) ? -1 : 1;
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/ImageBufferDownload.java minecraft/net/minecraft/client/renderer/ImageBufferDownload.java
--- minecraft_unpatched/net/minecraft/client/renderer/ImageBufferDownload.java	2021-09-10 01:29:05.848344800 -0700
+++ minecraft/net/minecraft/client/renderer/ImageBufferDownload.java	2021-09-12 00:47:34.993649800 -0700
@@ -33,34 +33,27 @@
         integer4 = n3;
         integer3 = n2;
         integer2 = (integer2 = n);
+        boolean b;
     Label_0076:
         while (true) {
             while (integer2 < integer4) {
                 for (int i = integer3; i < n4; ++i) {
                     if (this.imageData[integer2 + i * this.imageWidth] >>> 24 < 128) {
-                        final boolean b = true;
+                        b = true;
                         break Label_0076;
                     }
                 }
                 ++integer2;
-                continue;
-                boolean b = false;
-                if (b) {
-                    return;
-                }
-                int[] imageData;
-                int n5;
-                for (integer1 = 32; integer1 < 64; ++integer1) {
-                    for (integer2 = 0; integer2 < 32; ++integer2) {
-                        imageData = this.imageData;
-                        n5 = integer1 + integer2 * this.imageWidth;
-                        imageData[n5] &= 0xFFFFFF;
-                    }
+            }
+        }
+        if (!b) {
+            for (int i7 = 32; i7 < 64; i7++) {
+                for (int i8 = 0; i8 < 32; i8++) {
+                    int[] iArr = this.imageData;
+                    int i9 = (this.imageWidth * i8) + i7;
+                    iArr[i9] = iArr[i9] & 16777215;
                 }
-                return;
             }
-            final boolean b = false;
-            continue Label_0076;
         }
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/RenderEngine.java minecraft/net/minecraft/client/renderer/RenderEngine.java
--- minecraft_unpatched/net/minecraft/client/renderer/RenderEngine.java	2021-09-10 01:29:06.514918100 -0700
+++ minecraft/net/minecraft/client/renderer/RenderEngine.java	2021-09-12 00:35:06.961982200 -0700
@@ -19,8 +19,8 @@
 import java.util.HashMap;
 
 public class RenderEngine {
-    private HashMap textureMap;
-    private HashMap textureNameToImageMap;
+    private HashMap<String,Object> textureMap;
+    private HashMap<Integer,Object> textureNameToImageMap;
     private IntBuffer singleIntBuffer;
     private ByteBuffer imageData;
     private List textureList;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/RenderGlobal.java minecraft/net/minecraft/client/renderer/RenderGlobal.java
--- minecraft_unpatched/net/minecraft/client/renderer/RenderGlobal.java	2021-09-10 01:29:06.345272100 -0700
+++ minecraft/net/minecraft/client/renderer/RenderGlobal.java	2021-09-13 00:18:00.842848300 -0700
@@ -197,9 +197,9 @@
                         }
                         if (b) {
                             for (l = 0; l < list.size(); ++l) {
-                                final EntityLiving entity2;
-                                final Entity entity;
-                                n6 = (entity = (entity2 = (EntityLiving)list.get(l))).posX - vec3D.xCoord;
+                                final Entity entity2 = (Entity) list.get(l);;
+                                final Entity entity = entity2;
+                                n6 = entity.posX - vec3D.xCoord;
                                 n5 = entity.posY - vec3D.yCoord;
                                 n7 = entity.posZ - vec3D.zCoord;
                                 n6 = n6 * n6 + n5 * n5 + n7 * n7;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/RenderSorter.java minecraft/net/minecraft/client/renderer/RenderSorter.java
--- minecraft_unpatched/net/minecraft/client/renderer/RenderSorter.java	2021-09-10 01:29:06.358784000 -0700
+++ minecraft/net/minecraft/client/renderer/RenderSorter.java	2021-09-13 23:24:07.246438500 -0700
@@ -10,4 +10,15 @@
     public RenderSorter(final EntityPlayer entityPlayer) {
         this.baseEntity = entityPlayer;
     }
+    
+    public final int compare(Object obj, Object obj2) {
+        WorldRenderer hVar = (WorldRenderer) obj;
+        WorldRenderer hVar2 = (WorldRenderer) obj2;
+        boolean z = hVar.isInFrustrum;
+        boolean z2 = hVar2.isInFrustrum;
+        if (!z || z2) {
+            return ((!z2 || z) && hVar.distanceToEntitySquared(this.baseEntity) < hVar2.distanceToEntitySquared(this.baseEntity)) ? 1 : -1;
+        }
+        return 1;
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/WorldRenderer.java minecraft/net/minecraft/client/renderer/WorldRenderer.java
--- minecraft_unpatched/net/minecraft/client/renderer/WorldRenderer.java	2021-09-10 01:29:06.194642800 -0700
+++ minecraft/net/minecraft/client/renderer/WorldRenderer.java	2021-09-11 01:03:10.791462900 -0700
@@ -106,7 +106,7 @@
         }
     }
     
-    public final float compare(final EntityLiving e) {
+    public final float distanceToEntitySquared(final EntityLiving e) {
         final float n = e.posX - this.posXPlus;
         final float n2 = e.posY - this.posYPlus;
         final float n3 = e.posZ - this.posZPlus;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderArrow.java minecraft/net/minecraft/client/renderer/entity/RenderArrow.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderArrow.java	2021-09-10 01:29:06.229672700 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderArrow.java	2021-09-13 23:48:06.776037500 -0700
@@ -7,4 +7,48 @@
 import net.minecraft.game.entity.Entity;
 
 public final class RenderArrow extends Render {
+	
+    public final void doRender(Entity entity, float f, float f2, float f3, float f4, float f5) {
+        EntityArrow arrow = (EntityArrow) entity;
+        loadTexture("/item/arrows.png");
+        GL11.glPushMatrix();
+        GL11.glTranslatef(f, f2, f3);
+        GL11.glRotatef((arrow.prevRotationYaw + ((arrow.rotationYaw - arrow.prevRotationYaw) * f5)) - 90.0f, 0.0f, 1.0f, 0.0f);
+        GL11.glRotatef(arrow.prevRotationPitch + ((arrow.rotationPitch - arrow.prevRotationPitch) * f5), 0.0f, 0.0f, 1.0f);
+        Tessellator dVar = Tessellator.instance;
+        GL11.glEnable(2977);
+        float f6 = ((float) arrow.arrowShake) - f5;
+        if (f6 > 0.0f) {
+            GL11.glRotatef(f6 * (-MathHelper.sin(3.0f * f6)), 0.0f, 0.0f, 1.0f);
+        }
+        GL11.glRotatef(45.0f, 1.0f, 0.0f, 0.0f);
+        GL11.glScalef(0.05625f, 0.05625f, 0.05625f);
+        GL11.glTranslatef(-4.0f, 0.0f, 0.0f);
+        GL11.glNormal3f(0.05625f, 0.0f, 0.0f);
+        dVar.startDrawingQuads();
+        dVar.addVertexWithUV(-7.0f, -2.0f, -2.0f, 0.0f, 0.15625f);
+        dVar.addVertexWithUV(-7.0f, -2.0f, 2.0f, 0.15625f, 0.15625f);
+        dVar.addVertexWithUV(-7.0f, 2.0f, 2.0f, 0.15625f, 0.3125f);
+        dVar.addVertexWithUV(-7.0f, 2.0f, -2.0f, 0.0f, 0.3125f);
+        dVar.draw();
+        GL11.glNormal3f(-0.05625f, 0.0f, 0.0f);
+        dVar.startDrawingQuads();
+        dVar.addVertexWithUV(-7.0f, 2.0f, -2.0f, 0.0f, 0.15625f);
+        dVar.addVertexWithUV(-7.0f, 2.0f, 2.0f, 0.15625f, 0.15625f);
+        dVar.addVertexWithUV(-7.0f, -2.0f, 2.0f, 0.15625f, 0.3125f);
+        dVar.addVertexWithUV(-7.0f, -2.0f, -2.0f, 0.0f, 0.3125f);
+        dVar.draw();
+        for (int i = 0; i < 4; i++) {
+            GL11.glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
+            GL11.glNormal3f(0.0f, 0.0f, 0.05625f);
+            dVar.startDrawingQuads();
+            dVar.addVertexWithUV(-8.0f, -2.0f, 0.0f, 0.0f, 0.0f);
+            dVar.addVertexWithUV(8.0f, -2.0f, 0.0f, 0.5f, 0.0f);
+            dVar.addVertexWithUV(8.0f, 2.0f, 0.0f, 0.5f, 0.15625f);
+            dVar.addVertexWithUV(-8.0f, 2.0f, 0.0f, 0.0f, 0.15625f);
+            dVar.draw();
+        }
+        GL11.glDisable(2977);
+        GL11.glPopMatrix();
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderCreeper.java minecraft/net/minecraft/client/renderer/entity/RenderCreeper.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderCreeper.java	2021-09-10 01:29:06.284219500 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderCreeper.java	2021-09-13 23:43:28.359868600 -0700
@@ -11,4 +11,37 @@
     public RenderCreeper() {
         super(new ModelCreeper(), 0.5f);
     }
+    
+    public final int getColorMultiplier(EntityLiving entity, float f, float f2) {
+        int i = 255;
+        int i2 = 0;
+        float c = ((EntityCreeper) entity).setCreeperFlashTime(f2);
+        if (((int) (10.0f * c)) % 2 == 0) {
+            return 0;
+        }
+        int i3 = (int) (c * 0.2f * 255.0f);
+        if (i3 >= 0) {
+            i2 = i3;
+        }
+        if (i2 <= 255) {
+            i = i2;
+        }
+        return (i << 24) | 16711680 | 65280 | 255;
+    }
+
+    public final void preRenderCallback(EntityLiving entity, float f) {
+        float f2 = 0.0f;
+        float c = ((EntityCreeper) entity).setCreeperFlashTime(f);
+        float a = (MathHelper.sin(100.0f * c) * c * 0.01f) + 1.0f;
+        if (c >= 0.0f) {
+            f2 = c;
+        }
+        if (f2 > 1.0f) {
+            f2 = 1.0f;
+        }
+        float f3 = f2 * f2;
+        float f4 = f3 * f3;
+        float f5 = ((0.4f * f4) + 1.0f) * a;
+        GL11.glScalef(f5, ((f4 * 0.1f) + 1.0f) / a, f5);
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderGiantZombie.java minecraft/net/minecraft/client/renderer/entity/RenderGiantZombie.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderGiantZombie.java	2021-09-10 01:29:06.445358200 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderGiantZombie.java	2021-09-13 23:43:54.800983800 -0700
@@ -11,4 +11,8 @@
         super(modelBase, 3.0f);
         this.scale = 6.0f;
     }
+    
+    public final void preRenderCallback(EntityLiving entity, float f) {
+        GL11.glScalef(this.scale, this.scale, this.scale);
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderItem.java minecraft/net/minecraft/client/renderer/entity/RenderItem.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderItem.java	2021-09-10 01:29:05.821821600 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderItem.java	2021-09-13 23:47:37.812734000 -0700
@@ -112,4 +112,75 @@
         d.addVertex((float)(integer2 + integer4), (float)integer3, 0.0f);
         d.draw();
     }
+    
+    public final void doRenderItem(EntityItem entity, float f, float f2, float f3, float f4, float f5) {
+        EntityItem item = (EntityItem) entity;
+        this.random.setSeed(187);
+        ItemStack itemStack = item.item;
+        GL11.glPushMatrix();
+        float a = 0.1f + (MathHelper.sin(((((float) item.age) + f5) / 10.0f) + item.hoverStart) * 0.1f);
+        float f6 = 57.295776f * (((((float) item.age) + f5) / 20.0f) + item.hoverStart);
+        int i = 1;
+        if (item.item.stackSize > 1) {
+            i = 2;
+        }
+        if (item.item.stackSize > 5) {
+            i = 3;
+        }
+        int i2 = item.item.stackSize > 20 ? 4 : i;
+        GL11.glTranslatef(f, f2 + a, f3);
+        GL11.glEnable(2977);
+        if (itemStack.itemID >= 256 || Block.blocksList[itemStack.itemID].getRenderType() != 0) {
+            GL11.glScalef(0.5f, 0.5f, 0.5f);
+            int b = itemStack.getItem().getIconFromDamage();
+            if (itemStack.itemID < 256) {
+                loadTexture("/terrain.png");
+            } else {
+                loadTexture("/gui/items.png");
+            }
+            Tessellator dVar = Tessellator.instance;
+            float f7 = ((float) ((b % 16) << 4)) / 256.0f;
+            float f8 = ((float) (((b % 16) << 4) + 16)) / 256.0f;
+            float f9 = ((float) ((b / 16) << 4)) / 256.0f;
+            float f10 = ((float) (((b / 16) << 4) + 16)) / 256.0f;
+            for (int i3 = 0; i3 < i2; i3++) {
+                GL11.glPushMatrix();
+                if (i3 > 0) {
+                    GL11.glTranslatef(((this.random.nextFloat() * 2.0f) - 1.0f) * 0.3f, ((this.random.nextFloat() * 2.0f) - 1.0f) * 0.3f, ((this.random.nextFloat() * 2.0f) - 1.0f) * 0.3f);
+                }
+                GL11.glRotatef(180.0f - this.renderManager.playerViewY, 0.0f, 1.0f, 0.0f);
+                dVar.startDrawingQuads();
+                Tessellator.setNormal(0.0f, 1.0f, 0.0f);
+                dVar.addVertexWithUV(-0.5f, -0.25f, 0.0f, f7, f10);
+                dVar.addVertexWithUV(0.5f, -0.25f, 0.0f, f8, f10);
+                dVar.addVertexWithUV(0.5f, 0.75f, 0.0f, f8, f9);
+                dVar.addVertexWithUV(-0.5f, 0.75f, 0.0f, f7, f9);
+                dVar.draw();
+                GL11.glPopMatrix();
+            }
+        } else {
+            GL11.glRotatef(f6, 0.0f, 1.0f, 0.0f);
+            loadTexture("/terrain.png");
+            float f11 = 0.25f;
+            if (!Block.blocksList[itemStack.itemID].renderAsNormalBlock() && itemStack.itemID != Block.stairSingle.blockID) {
+                f11 = 0.5f;
+            }
+            GL11.glScalef(f11, f11, f11);
+            for (int i4 = 0; i4 < i2; i4++) {
+                GL11.glPushMatrix();
+                if (i4 > 0) {
+                    GL11.glTranslatef((((this.random.nextFloat() * 2.0f) - 1.0f) * 0.2f) / f11, (((this.random.nextFloat() * 2.0f) - 1.0f) * 0.2f) / f11, (((this.random.nextFloat() * 2.0f) - 1.0f) * 0.2f) / f11);
+                }
+                this.renderBlocks.renderBlockOnInventory(Block.blocksList[itemStack.itemID]);
+                GL11.glPopMatrix();
+            }
+        }
+        GL11.glDisable(2977);
+        GL11.glPopMatrix();
+    }
+
+	public void doRender(Entity p0, float p1, float p2, float p3, float p4, float p5)
+	{
+		this.doRenderItem((EntityItem)p0, p1, p2, p3, p4, p5);
+	}
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderLiving.java minecraft/net/minecraft/client/renderer/entity/RenderLiving.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderLiving.java	2021-09-10 01:29:06.130587400 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderLiving.java	2021-09-13 23:16:58.483187500 -0700
@@ -114,4 +114,8 @@
     
     protected void preRenderCallback(final EntityLiving entityLiving, final float float2) {
     }
+    
+    public void doRender(Entity entity, float d, float d1, float d2, float f, float f1) {
+		doRender((EntityLiving)entity, d, d1, d2, f, f1);
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderPainting.java minecraft/net/minecraft/client/renderer/entity/RenderPainting.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderPainting.java	2021-09-10 01:29:06.453365100 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderPainting.java	2021-09-13 23:47:00.504470500 -0700
@@ -13,4 +13,88 @@
     public RenderPainting() {
         this.rand = new Random();
     }
+    
+    public final void doRender(Entity entity, float f, float f2, float f3, float f4, float f5) {
+        EntityPainting painting = (EntityPainting) entity;
+        this.rand.setSeed(187);
+        GL11.glPushMatrix();
+        GL11.glTranslatef(f, f2, f3);
+        GL11.glRotatef(f4, 0.0f, 1.0f, 0.0f);
+        GL11.glEnable(2977);
+        loadTexture("/art/kz.png");
+        EnumArt paintingType = painting.art;
+        GL11.glScalef(0.0625f, 0.0625f, 0.0625f);
+        int i = paintingType.sizeX;
+        int i2 = paintingType.sizeY;
+        int i3 = paintingType.offsetX;
+        int i4 = paintingType.offsetY;
+        float f6 = ((float) (-i)) / 2.0f;
+        float f7 = ((float) (-i2)) / 2.0f;
+        for (int i5 = 0; i5 < i / 16; i5++) {
+            for (int i6 = 0; i6 < i2 / 16; i6++) {
+                float f8 = f6 + ((float) ((i5 + 1) << 4));
+                float f9 = f6 + ((float) (i5 << 4));
+                float f10 = f7 + ((float) ((i6 + 1) << 4));
+                float f11 = f7 + ((float) (i6 << 4));
+                float f12 = (f8 + f9) / 2.0f;
+                int i7 = (int) painting.posX;
+                int i8 = (int) ((((f10 + f11) / 2.0f) / 16.0f) + painting.posY);
+                int i9 = (int) painting.posZ;
+                if (painting.direction == 0) {
+                    i7 = (int) (painting.posX + (f12 / 16.0f));
+                }
+                if (painting.direction == 1) {
+                    i9 = (int) (painting.posZ - (f12 / 16.0f));
+                }
+                if (painting.direction == 2) {
+                    i7 = (int) (painting.posX - (f12 / 16.0f));
+                }
+                if (painting.direction == 3) {
+                    i9 = (int) (painting.posZ + (f12 / 16.0f));
+                }
+                float c = this.renderManager.worldObj.getLightBrightness(i7, i8, i9);
+                GL11.glColor3f(c, c, c);
+                float f13 = ((float) ((i3 + i) - (i5 << 4))) / 256.0f;
+                float f14 = ((float) ((i3 + i) - ((i5 + 1) << 4))) / 256.0f;
+                float f15 = ((float) ((i4 + i2) - (i6 << 4))) / 256.0f;
+                float f16 = ((float) ((i4 + i2) - ((i6 + 1) << 4))) / 256.0f;
+                Tessellator dVar2 = Tessellator.instance;
+                dVar2.startDrawingQuads();
+                Tessellator.setNormal(0.0f, 0.0f, -1.0f);
+                dVar2.addVertexWithUV(f8, f11, -0.5f, f14, f15);
+                dVar2.addVertexWithUV(f9, f11, -0.5f, f13, f15);
+                dVar2.addVertexWithUV(f9, f10, -0.5f, f13, f16);
+                dVar2.addVertexWithUV(f8, f10, -0.5f, f14, f16);
+                Tessellator.setNormal(0.0f, 0.0f, 1.0f);
+                dVar2.addVertexWithUV(f8, f10, 0.5f, 0.75f, 0.0f);
+                dVar2.addVertexWithUV(f9, f10, 0.5f, 0.8125f, 0.0f);
+                dVar2.addVertexWithUV(f9, f11, 0.5f, 0.8125f, 0.0625f);
+                dVar2.addVertexWithUV(f8, f11, 0.5f, 0.75f, 0.0625f);
+                Tessellator.setNormal(0.0f, -1.0f, 0.0f);
+                dVar2.addVertexWithUV(f8, f10, -0.5f, 0.75f, 0.001953125f);
+                dVar2.addVertexWithUV(f9, f10, -0.5f, 0.8125f, 0.001953125f);
+                dVar2.addVertexWithUV(f9, f10, 0.5f, 0.8125f, 0.001953125f);
+                dVar2.addVertexWithUV(f8, f10, 0.5f, 0.75f, 0.001953125f);
+                Tessellator.setNormal(0.0f, 1.0f, 0.0f);
+                dVar2.addVertexWithUV(f8, f11, 0.5f, 0.75f, 0.001953125f);
+                dVar2.addVertexWithUV(f9, f11, 0.5f, 0.8125f, 0.001953125f);
+                dVar2.addVertexWithUV(f9, f11, -0.5f, 0.8125f, 0.001953125f);
+                dVar2.addVertexWithUV(f8, f11, -0.5f, 0.75f, 0.001953125f);
+                Tessellator.setNormal(-1.0f, 0.0f, 0.0f);
+                dVar2.addVertexWithUV(f8, f10, 0.5f, 0.7519531f, 0.0f);
+                dVar2.addVertexWithUV(f8, f11, 0.5f, 0.7519531f, 0.0625f);
+                dVar2.addVertexWithUV(f8, f11, -0.5f, 0.7519531f, 0.0625f);
+                dVar2.addVertexWithUV(f8, f10, -0.5f, 0.7519531f, 0.0f);
+                Tessellator.setNormal(1.0f, 0.0f, 0.0f);
+                dVar2.addVertexWithUV(f9, f10, -0.5f, 0.7519531f, 0.0f);
+                dVar2.addVertexWithUV(f9, f11, -0.5f, 0.7519531f, 0.0625f);
+                dVar2.addVertexWithUV(f9, f11, 0.5f, 0.7519531f, 0.0625f);
+                dVar2.addVertexWithUV(f9, f10, 0.5f, 0.7519531f, 0.0f);
+                dVar2.draw();
+            }
+        }
+        GL11.glDisable(2977);
+        GL11.glPopMatrix();
+    }
+
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderPlayer.java minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderPlayer.java	2021-09-10 01:29:06.351277300 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderPlayer.java	2021-09-14 00:09:20.495962800 -0700
@@ -8,6 +8,7 @@
 import net.minecraft.game.entity.player.EntityPlayer;
 import net.minecraft.client.model.ModelBase;
 import net.minecraft.client.model.ModelBiped;
+import net.minecraft.client.model.ModelRenderer;
 
 public final class RenderPlayer extends RenderLiving {
     private ModelBiped modelBipedMain;
@@ -30,6 +31,38 @@
         this.modelBipedMain.bipedRightArm.render(1.0f);
     }
     
+    
+    public final boolean shouldRenderPass(EntityLiving entity, int i) {
+        boolean z = false;
+        ItemStack itemStack = ((EntityPlayer) entity).inventory.armorInventory[3 - i];
+        if (itemStack != null) {
+            Item a = itemStack.getItem();
+            if (a instanceof ItemArmor) {
+                loadTexture("/armor/" + armorFilenamePrefix[((ItemArmor) a).renderIndex] + "_" + (i == 2 ? 2 : 1) + ".png");
+                ModelBiped modelBiped = i == 2 ? this.modelArmor : this.modelArmorChestplate;
+                modelBiped.bipedHead.showModel = i == 0;
+                modelBiped.bipedHeadwear.showModel = i == 0;
+                modelBiped.bipedBody.showModel = i == 1 || i == 2;
+                modelBiped.bipedLeftArm.showModel = i == 1;
+                modelBiped.bipedRightArm.showModel = i == 1;
+                modelBiped.bipedLeftLeg.showModel = i == 2 || i == 3;
+                ModelRenderer cVar = modelBiped.bipedRightLeg;
+                if (i == 2 || i == 3) {
+                    z = true;
+                }
+                cVar.showModel = z;
+                setRenderPassModel((ModelBase) modelBiped);
+                return true;
+            }
+        }
+        return false;
+    }
+    
+    public void doRender(Entity entity, float d, float d1, float d2, float f, float f1)
+    {
+    	this.renderPlayer((EntityPlayer)entity, d, d1, d2, f, f1);
+    }
+    
     static {
         armorFilenamePrefix = new String[] { "cloth", "chain", "iron", "diamond", "gold" };
     }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderSheep.java minecraft/net/minecraft/client/renderer/entity/RenderSheep.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderSheep.java	2021-09-10 01:29:05.821322100 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderSheep.java	2021-09-13 23:45:52.864141500 -0700
@@ -9,4 +9,9 @@
         super(modelBase, 0.7f);
         this.setRenderPassModel(modelBase2);
     }
+    public final boolean shouldRenderPass(EntityLiving entity, int i) {
+        EntitySheep sheep = (EntitySheep) entity;
+        loadTexture("/mob/sheep_fur.png");
+        return i == 0 && !sheep.sheared;
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderSpider.java minecraft/net/minecraft/client/renderer/entity/RenderSpider.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderSpider.java	2021-09-10 01:29:06.005980400 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderSpider.java	2021-09-13 23:45:24.154424800 -0700
@@ -11,4 +11,21 @@
         super(new ModelSpider(), 1.0f);
         this.setRenderPassModel(new ModelSpider());
     }
+    
+    public final float getDeathMaxRotation(EntityLiving eVar) {
+        return 180.0f;
+    }
+
+    public final boolean shouldRenderPass(EntityLiving entity, int i) {
+        EntitySpider spider = (EntitySpider) entity;
+        if (i != 0 || i != 0) {
+            return false;
+        }
+        loadTexture("/mob/spider_eyes.png");
+        GL11.glEnable(3042);
+        GL11.glDisable(3008);
+        GL11.glBlendFunc(770, 771);
+        GL11.glColor4f(1.0f, 1.0f, 1.0f, (1.0f - spider.getEntityBrightness(1.0f)) * 0.5f);
+        return true;
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/client/renderer/entity/RenderTNTPrimed.java minecraft/net/minecraft/client/renderer/entity/RenderTNTPrimed.java
--- minecraft_unpatched/net/minecraft/client/renderer/entity/RenderTNTPrimed.java	2021-09-10 01:29:06.093055200 -0700
+++ minecraft/net/minecraft/client/renderer/entity/RenderTNTPrimed.java	2021-09-14 00:10:16.362488900 -0700
@@ -13,4 +13,39 @@
         this.blockRenderer = new RenderBlocks();
         this.shadowSize = 0.5f;
     }
+    
+    public final void doRender(Entity entity, float f, float f2, float f3, float f4, float f5) {
+        float f6 = 0.0f;
+        EntityTNT tnt = (EntityTNT) entity;
+        GL11.glPushMatrix();
+        GL11.glTranslatef(f, f2, f3);
+        if ((((float) tnt.fuse) - f5) + 1.0f < 10.0f) {
+            float f7 = 1.0f - (((((float) tnt.fuse) - f5) + 1.0f) / 10.0f);
+            if (f7 >= 0.0f) {
+                f6 = f7;
+            }
+            if (f6 > 1.0f) {
+                f6 = 1.0f;
+            }
+            float f8 = f6 * f6;
+            float f9 = (f8 * f8 * 0.3f) + 1.0f;
+            GL11.glScalef(f9, f9, f9);
+        }
+        float f10 = (1.0f - (((((float) tnt.fuse) - f5) + 1.0f) / 100.0f)) * 0.8f;
+        loadTexture("/terrain.png");
+        this.blockRenderer.renderBlockOnInventory(Block.tnt);
+        if ((tnt.fuse / 5) % 2 == 0) {
+            GL11.glDisable(3553);
+            GL11.glDisable(2896);
+            GL11.glEnable(3042);
+            GL11.glBlendFunc(770, 772);
+            GL11.glColor4f(1.0f, 1.0f, 1.0f, f10);
+            this.blockRenderer.renderBlockOnInventory(Block.tnt);
+            GL11.glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+            GL11.glDisable(3042);
+            GL11.glEnable(2896);
+            GL11.glEnable(3553);
+        }
+        GL11.glPopMatrix();
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/block/BlockFarmland.java minecraft/net/minecraft/game/block/BlockFarmland.java
--- minecraft_unpatched/net/minecraft/game/block/BlockFarmland.java	2021-09-10 01:29:06.540940200 -0700
+++ minecraft/net/minecraft/game/block/BlockFarmland.java	2021-09-13 22:40:16.041101300 -0700
@@ -41,62 +41,51 @@
     
     @Override
     public final void updateTick(final World world, final int xCoord, final int yCoord, final int zCoord, final Random random) {
+        boolean b;
+        boolean b2 = true;
         if (random.nextInt(5) == 0) {
-            int n = zCoord;
-            int n2 = yCoord;
-            int n3 = xCoord;
-            int i = n3 - 4;
-        Label_0105:
+            int i4 = xCoord - 4;
+            loop0:
             while (true) {
-            Label_0220_Outer:
-                while (i <= n3 + 4) {
-                    for (int j = n2; j <= n2 + 1; ++j) {
-                        for (int k = n - 4; k <= n + 4; ++k) {
-                            if (world.getBlockMaterial(i, j, k) == Material.water) {
-                                final boolean b = true;
-                                break Label_0105;
-                            }
+                if (i4 > xCoord + 4) {
+                    b = false;
+                    break;
+                }
+                for (int i5 = yCoord; i5 <= yCoord + 1; i5++) {
+                    for (int i6 = zCoord - 4; i6 <= zCoord + 4; i6++) {
+                        if (world.getBlockMaterial(i4, i5, i6) == Material.water) {
+                            b = true;
+                            break loop0;
                         }
                     }
-                    ++i;
-                    continue Label_0220_Outer;
-                    boolean b = false;
-                    if (b) {
-                        world.setBlockMetadataWithNotify(xCoord, yCoord, zCoord, 7);
-                        return;
-                    }
-                    final byte blockMetadata;
-                    if ((blockMetadata = world.getBlockMetadata(xCoord, yCoord, zCoord)) > 0) {
-                        world.setBlockMetadataWithNotify(xCoord, yCoord, zCoord, blockMetadata - 1);
-                        return;
-                    }
-                    n = zCoord;
-                    n2 = yCoord;
-                    int j;
-                    n3 = (j = xCoord);
-                Label_0220:
-                    while (true) {
-                        while (j <= n3) {
-                            for (int k = n; k <= n; ++k) {
-                                if (world.getBlockId(j, n2 + 1, k) == Block.crops.blockID) {
-                                    final boolean b2 = true;
-                                    break Label_0220;
-                                }
-                            }
-                            ++j;
-                            continue Label_0220_Outer;
-                            boolean b2 = false;
-                            if (!b2) {
-                                world.setBlockWithNotify(xCoord, yCoord, zCoord, Block.dirt.blockID);
-                            }
-                            return;
-                        }
-                        final boolean b2 = false;
-                        continue Label_0220;
+                }
+                i4++;
+            }
+            if (b) {
+                world.setBlockMetadataWithNotify(xCoord, yCoord, zCoord, 7);
+                return;
+            }
+            byte e = world.getBlockMetadata(xCoord, yCoord, zCoord);
+            if (e > 0) {
+                world.setBlockMetadataWithNotify(xCoord, yCoord, zCoord, e - 1);
+                return;
+            }
+            int i7 = xCoord;
+            loop3:
+            while (true) {
+                if (i7 > xCoord) {
+                    b2 = false;
+                    break;
+                }
+                for (int i8 = zCoord; i8 <= zCoord; i8++) {
+                    if (world.getBlockId(i7, yCoord + 1, i8) == Block.crops.blockID) {
+                        break loop3;
                     }
                 }
-                final boolean b = false;
-                continue Label_0105;
+                i7++;
+            }
+            if (!b2) {
+                world.setBlockWithNotify(xCoord, yCoord, zCoord, Block.dirt.blockID);
             }
         }
     }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/entity/monster/EntityCreeper.java minecraft/net/minecraft/game/entity/monster/EntityCreeper.java
--- minecraft_unpatched/net/minecraft/game/entity/monster/EntityCreeper.java	2021-09-10 01:29:06.443856900 -0700
+++ minecraft/net/minecraft/game/entity/monster/EntityCreeper.java	2021-09-11 00:49:08.907057100 -0700
@@ -64,8 +64,8 @@
         }
     }
     
-    @Override
-    public final float getEntityBrightness(final float float1) {
+
+    public final float setCreeperFlashTime(final float float1) {
         return (this.lastActiveTime + (this.timeSinceIgnited - this.lastActiveTime) * float1) / (this.fuseTime - 2);
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/entity/player/InventoryPlayer.java minecraft/net/minecraft/game/entity/player/InventoryPlayer.java
--- minecraft_unpatched/net/minecraft/game/entity/player/InventoryPlayer.java	2021-09-10 01:29:05.772279100 -0700
+++ minecraft/net/minecraft/game/entity/player/InventoryPlayer.java	2021-09-13 01:01:54.640076500 -0700
@@ -57,62 +57,41 @@
     }
     
     public final boolean storePartialItemStack(final ItemStack itemStack) {
-        Label_0335: {
-            if (itemStack.itemDamage == 0) {
-                final int itemID = itemStack.itemID;
-                int stackSize = itemStack.stackSize;
-                final int n;
-                int integer1 = n = itemID;
-                int i = 0;
-                while (true) {
-                    while (i < this.mainInventory.length) {
-                        if (this.mainInventory[i] != null && this.mainInventory[i].itemID == n && this.mainInventory[i].stackSize < this.mainInventory[i].getItem().getItemStackLimit() && this.mainInventory[i].stackSize < 64) {
-                            final int n3;
-                            final int n2 = n3 = i;
-                            int storeItemStack = n3;
-                            if (n2 < 0) {
-                                storeItemStack = this.storeItemStack();
-                            }
-                            int stackSize2;
-                            if (storeItemStack < 0) {
-                                stackSize2 = stackSize;
-                            }
-                            else {
-                                if (this.mainInventory[storeItemStack] == null) {
-                                    this.mainInventory[storeItemStack] = new ItemStack(integer1, 0);
-                                }
-                                if ((integer1 = stackSize) > this.mainInventory[storeItemStack].getItem().getItemStackLimit() - this.mainInventory[storeItemStack].stackSize) {
-                                    integer1 = this.mainInventory[storeItemStack].getItem().getItemStackLimit() - this.mainInventory[storeItemStack].stackSize;
-                                }
-                                if (integer1 > 64 - this.mainInventory[storeItemStack].stackSize) {
-                                    integer1 = 64 - this.mainInventory[storeItemStack].stackSize;
-                                }
-                                if (integer1 == 0) {
-                                    stackSize2 = stackSize;
-                                }
-                                else {
-                                    stackSize -= integer1;
-                                    final ItemStack itemStack2 = this.mainInventory[storeItemStack];
-                                    itemStack2.stackSize += integer1;
-                                    this.mainInventory[storeItemStack].animationsToGo = 5;
-                                    stackSize2 = stackSize;
-                                }
-                            }
-                            itemStack.stackSize = stackSize2;
-                            if (itemStack.stackSize == 0) {
-                                return true;
-                            }
-                            break Label_0335;
-                        }
-                        else {
-                            ++i;
-                        }
+        if (itemStack.itemDamage == 0) {
+            int i = itemStack.itemID;
+            int i2 = itemStack.stackSize;
+            int i3 = 0;
+            while (true) {
+                if (i3 < this.mainInventory.length) {
+                    if (this.mainInventory[i3] != null && this.mainInventory[i3].itemID == i && this.mainInventory[i3].stackSize < this.mainInventory[i3].getItem().getItemStackLimit() && this.mainInventory[i3].stackSize < 64) {
+                        break;
                     }
-                    int n3;
-                    final int n2 = n3 = -1;
-                    continue;
+                    i3++;
+                } else {
+                    i3 = -1;
+                    break;
                 }
             }
+            int f = i3 < 0 ? storeItemStack() : i3;
+            if (f >= 0) {
+                if (this.mainInventory[f] == null) {
+                    this.mainInventory[f] = new ItemStack(i, 0);
+                }
+                int c = i2 > this.mainInventory[f].getItem().getItemStackLimit() - this.mainInventory[f].stackSize ? this.mainInventory[f].getItem().getItemStackLimit() - this.mainInventory[f].stackSize : i2;
+                if (c > 64 - this.mainInventory[f].stackSize) {
+                    c = 64 - this.mainInventory[f].stackSize;
+                }
+                if (c != 0) {
+                    i2 -= c;
+                    ItemStack kVar2 = this.mainInventory[f];
+                    kVar2.stackSize = c + kVar2.stackSize;
+                    this.mainInventory[f].animationsToGo = 5;
+                }
+            }
+            itemStack.stackSize = i2;
+            if (itemStack.stackSize == 0) {
+                return true;
+            }
         }
         final int storeItemStack2;
         if ((storeItemStack2 = this.storeItemStack()) >= 0) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/item/Item.java minecraft/net/minecraft/game/item/Item.java
--- minecraft_unpatched/net/minecraft/game/item/Item.java	2021-09-10 01:29:05.921908200 -0700
+++ minecraft/net/minecraft/game/item/Item.java	2021-09-11 00:50:33.323520900 -0700
@@ -76,7 +76,7 @@
     public final int shiftedIndex;
     protected int maxStackSize;
     protected int maxDamage;
-    private int iconIndex;
+    protected int iconIndex;
     
     protected Item(final int itemID) {
         this.maxStackSize = 64;
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/level/BlockMap.java minecraft/net/minecraft/game/level/BlockMap.java
--- minecraft_unpatched/net/minecraft/game/level/BlockMap.java	2021-09-10 01:29:06.457368400 -0700
+++ minecraft/net/minecraft/game/level/BlockMap.java	2021-09-12 00:52:53.612867100 -0700
@@ -12,7 +12,7 @@
     private BlockMapSlot slot;
     private BlockMapSlot slot2;
     public List[] entityGrid;
-    public List all;
+    public List<Entity> all;
     private List tmp;
     
     public BlockMap(int width, int depth, int height) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/level/BlockMapSlot.java minecraft/net/minecraft/game/level/BlockMapSlot.java
--- minecraft_unpatched/net/minecraft/game/level/BlockMapSlot.java	2021-09-10 01:29:06.131087800 -0700
+++ minecraft/net/minecraft/game/level/BlockMapSlot.java	2021-09-11 00:52:08.955293100 -0700
@@ -3,12 +3,12 @@
 import net.minecraft.game.entity.Entity;
 
 final class BlockMapSlot {
-    private int xSlot;
-    private int ySlot;
-    private int zSlot;
+    int xSlot;
+    int ySlot;
+    int zSlot;
     private /* synthetic */ BlockMap blockMap;
     
-    private BlockMapSlot(final BlockMap blockMap, final byte byte2) {
+    BlockMapSlot(final BlockMap blockMap) {
         this.blockMap = blockMap;
     }
     
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/level/LevelLoader.java minecraft/net/minecraft/game/level/LevelLoader.java
--- minecraft_unpatched/net/minecraft/game/level/LevelLoader.java	2021-09-10 01:29:06.271708700 -0700
+++ minecraft/net/minecraft/game/level/LevelLoader.java	2021-09-12 00:41:02.759135300 -0700
@@ -3,6 +3,7 @@
 import java.util.Iterator;
 import java.io.DataOutput;
 import java.io.DataOutputStream;
+import java.io.IOException;
 import java.util.zip.GZIPOutputStream;
 import com.nbt.NBTBase;
 import net.minecraft.game.block.Block;
@@ -34,17 +35,18 @@
         this.guiLoading = guiLoading;
     }
     
-    public final World load(InputStream var_1_29) {
+    public final World load(InputStream var_1_29) throws IOException {
         if (this.guiLoading != null) {
             this.guiLoading.setTitle("Loading level");
         }
         if (this.guiLoading != null) {
             this.guiLoading.setText("Reading..");
         }
-        final NBTTagCompound compoundTag = ((NBTTagCompound)(var_1_29 = (InputStream)GuiLevelLoading.writeLevelTags(var_1_29))).getCompoundTag("About");
-        final NBTTagCompound compoundTag2 = ((NBTTagCompound)var_1_29).getCompoundTag("Map");
-        final NBTTagCompound compoundTag3 = ((NBTTagCompound)var_1_29).getCompoundTag("Environment");
-        final NBTTagList tagList = ((NBTTagCompound)var_1_29).getTagList("Entities");
+		NBTTagCompound var13 = GuiLevelLoading.writeLevelTags(var_1_29);
+        final NBTTagCompound compoundTag = var13.getCompoundTag("About");
+        final NBTTagCompound compoundTag2 = var13.getCompoundTag("Map");
+        final NBTTagCompound compoundTag3 = var13.getCompoundTag("Environment");
+        final NBTTagList tagList = var13.getTagList("Entities");
         int n = compoundTag2.getShort("Width");
         int short1 = compoundTag2.getShort("Length");
         final short short2 = compoundTag2.getShort("Height");
@@ -97,7 +99,7 @@
                 ex.printStackTrace();
             }
         }
-        final NBTTagList tagList3 = ((NBTTagCompound)var_1_29).getTagList("TileEntities");
+        final NBTTagList tagList3 = var13.getTagList("TileEntities");
         for (int j = 0; j < tagList3.tagCount(); ++j) {
             try {
                 final NBTTagCompound nbtTagCompound2;
@@ -157,7 +159,7 @@
         return null;
     }
     
-    public final void save(final World world, OutputStream outputStream) {
+    public final void save(final World world, OutputStream outputStream) throws IOException {
         if (this.guiLoading != null) {
             this.guiLoading.setTitle("Saving level");
         }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/level/World.java minecraft/net/minecraft/game/level/World.java
--- minecraft_unpatched/net/minecraft/game/level/World.java	2021-09-10 01:29:06.374797400 -0700
+++ minecraft/net/minecraft/game/level/World.java	2021-09-12 00:53:04.808412100 -0700
@@ -39,7 +39,7 @@
     public int defaultFluid;
     List worldAccesses;
     private List tickList;
-    public Map map;
+    public Map<Integer,Object> map;
     private List list;
     int[] worldIntArray1;
     public Random random;
@@ -224,6 +224,7 @@
                 this.ySpawn = ySpawn;
                 this.zSpawn = zSpawn;
                 this.rotSpawn = 180.0f;
+                return;
             }
         }
     }
@@ -1166,7 +1167,7 @@
                 int n8 = this.worldIntArray2[--i];
                 if (this.blocksShortArray[n8] != World.worldShort) {
                     int n9;
-                    for (integer1 = n8 % 1024, n9 *= (n9 = (integer3 = n8 / 1024) - n2); integer1 > 0 && this.blocksShortArray[n8 - 1] != World.worldShort && (this.blocks[(integer2 * this.length + integer3) * this.width + integer1 - 1] == integer4 || this.blocks[(integer2 * this.length + integer3) * this.width + integer1 - 1] == integer5); --integer1, --n8) {}
+                    for (integer1 = n8 % 1024, n9 = (integer3 = n8 / 1024) - n2; integer1 > 0 && this.blocksShortArray[n8 - 1] != World.worldShort && (this.blocks[(integer2 * this.length + integer3) * this.width + integer1 - 1] == integer4 || this.blocks[(integer2 * this.length + integer3) * this.width + integer1 - 1] == integer5); --integer1, --n8) {}
                     if (integer1 > 0 && this.blocks[(integer2 * this.length + integer3) * this.width + integer1 - 1] == n5) {
                         b = true;
                     }
@@ -1202,7 +1203,7 @@
                             n12 = b2;
                         }
                         int n13;
-                        if ((n13 = (n13 *= (n13 = integer1 - n)) + n9) > n7) {
+                        if ((n13 = (n13 = integer1 - n) + n9) > n7) {
                             n7 = n13;
                             n3 = ((integer2 << 10) + integer3 << 10) + integer1;
                         }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/level/generator/LevelGenerator.java minecraft/net/minecraft/game/level/generator/LevelGenerator.java
--- minecraft_unpatched/net/minecraft/game/level/generator/LevelGenerator.java	2021-09-10 01:29:06.675556100 -0700
+++ minecraft/net/minecraft/game/level/generator/LevelGenerator.java	2021-09-11 00:56:49.169710300 -0700
@@ -296,13 +296,13 @@
             if (this.levelType == 1) {
                 i = Block.lavaStill.blockID;
             }
-            for (int j = 0; j < width; ++j) {
-                this.flood(j, this.waterLevel - 1, 0, 0, i);
-                this.flood(j, this.waterLevel - 1, depth - 1, 0, i);
+            for (int j1 = 0; j1 < width; ++j1) {
+                this.flood(j1, this.waterLevel - 1, 0, 0, i);
+                this.flood(j1, this.waterLevel - 1, depth - 1, 0, i);
             }
-            for (int j = 0; j < depth; ++j) {
-                this.flood(width - 1, this.waterLevel - 1, j, 0, i);
-                this.flood(0, this.waterLevel - 1, j, 0, i);
+            for (int j2 = 0; j2 < depth; ++j2) {
+                this.flood(width - 1, this.waterLevel - 1, j2, 0, i);
+                this.flood(0, this.waterLevel - 1, j2, 0, i);
             }
         }
         if (this.levelType == 0) {
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/recipe/RecipeSorter.java minecraft/net/minecraft/game/recipe/RecipeSorter.java
--- minecraft_unpatched/net/minecraft/game/recipe/RecipeSorter.java	2021-09-10 01:29:06.622511200 -0700
+++ minecraft/net/minecraft/game/recipe/RecipeSorter.java	2021-09-11 00:57:17.238053300 -0700
@@ -5,4 +5,13 @@
 final class RecipeSorter implements Comparator {
     RecipeSorter(final CraftingManager craftingManager) {
     }
+    
+    public final int compare(Object obj, Object obj2) {
+    	ShapelessRecipes cVar = (ShapelessRecipes) obj;
+    	ShapelessRecipes cVar2 = (ShapelessRecipes) obj2;
+        if (cVar2.getRecipeSize() < cVar.getRecipeSize()) {
+            return -1;
+        }
+        return cVar2.getRecipeSize() > cVar.getRecipeSize() ? 1 : 0;
+    }
 }
diff -r -U3 '--exclude=*~' minecraft_unpatched/net/minecraft/game/recipe/ShapelessRecipes.java minecraft/net/minecraft/game/recipe/ShapelessRecipes.java
--- minecraft_unpatched/net/minecraft/game/recipe/ShapelessRecipes.java	2021-09-10 01:29:05.961942600 -0700
+++ minecraft/net/minecraft/game/recipe/ShapelessRecipes.java	2021-09-11 00:57:37.262226000 -0700
@@ -55,7 +55,7 @@
         return new ItemStack(this.recipeOutput.itemID, this.recipeOutput.stackSize);
     }
     
-    public final int compare() {
+    public final int getRecipeSize() {
         return this.width * this.height;
     }
 }
